#!/bin/bash
#
# A simple framework for testing the bn scripts
#
# Returns the number of failed test cases.
#
# Format of a test:
#     test 'command' expected_return_value 'stdin text' 'expected stdout' 'expected stderr'
#
# Some example test cases are given. You should add more test cases.
#
# Kurlan, McMaster University, 2024


# GLOBALS: tc = test case number, fails = number of failed cases
declare -i tc=0
declare -i fails=0

############################################
# Run a single test. Runs a given command 3 times
# to check the return value, stdout, and stderr
#
# GLOBALS: tc, fails
# PARAMS: $1 = command
#         $2 = expected return value
#         $3 = standard input text to send
#         $4 = expected stdout
#         $5 = expected stderr
# RETURNS: 0 = success, 1 = bad return, 
#          2 = bad stdout, 3 = bad stderr
############################################
test() {
    tc=tc+1

    local COMMAND=$1
    local RETURN=$2
    local STDIN=$3
    local STDOUT=$4
    local STDERR=$5

    # CHECK RETURN VALUE
    $COMMAND <<< "$STDIN" >/dev/null 2>/dev/null
    local A_RETURN=$?

    if [[ "$A_RETURN" != "$RETURN" ]]; then
        echo "Test $tc Failed"
        echo "   $COMMAND"
        echo "   Expected Return: $RETURN"
        echo "   Actual Return: $A_RETURN"
        fails=$fails+1
        return 1
    fi

    # CHECK STDOUT
    local A_STDOUT=$($COMMAND <<< "$STDIN" 2>/dev/null)

    if [[ "$STDOUT" != "$A_STDOUT" ]]; then
        echo "Test $tc Failed"
        echo "   $COMMAND"
        echo "   Expected STDOUT: $STDOUT"
        echo "   Actual STDOUT: $A_STDOUT"
        fails=$fails+1
        return 2
    fi

    # CHECK STDERR
    local A_STDERR=$($COMMAND <<< "$STDIN" 2>&1 >/dev/null)

    if [[ "$STDERR" != "$A_STDERR" ]]; then
        echo "Test $tc Failed"
        echo "   $COMMAND"
        echo "   Expected STDERR: $STDERR"
        echo "   Actual STDERR: $A_STDERR"
        fails=$fails+1
        return 3
    fi

    # SUCCESS
    echo "Test $tc Passed"
    return 0
}

##########################################
# TEST CASES
##########################################

# simple success female
test './bn 2008 F' 0 'Meisha' '2008: Meisha ranked 6487 out of 20474 female names' ''

# simple success male
test './bn 2005 M' 0 'abdul' '2005: abdul ranked 1266 out of 13368 male names' ''

# success both genders and multiple arguments
test './bn 1972 b' 0 'Anita alex' '1972: Anita ranked 3355 out of 5753 male names
1972: Anita ranked 136 out of 9663 female names
1972: alex ranked 196 out of 5753 male names
1972: alex ranked 3542 out of 9663 female names' ''

# success name is not in the list
test './bn 2005 M' 0 'KURLAN' '2005: KURLAN not found among male names' ''

# Error Case #1 too many arguments
test './bn 1 x 3' 1 '' '' 'bn [year of birth] [assigned gender f|F|m|M|b|B]'

# Error Case #2 gender
test './bn 2000 Weee' 2 '' '' 'Badly formatted assigned gender: Weee
bn [year of birth] [assigned gender f|F|m|M|b|B]'

# Error Case #2 year
test './bn 9999999 M' 2 '' '' 'Badly formatted year of birth: 9999999
bn [year of birth] [assigned gender f|F|m|M|b|B]'

# Error Case #3
test './bn 1933 M' 3 'Daniel123' '' 'Badly formatted name: Daniel123'

# Error Case #4
test './bn 3000 B' 4 '' '' 'No data for 3000'

# return code
exit $fails
