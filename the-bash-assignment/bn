#!/bin/bash
# Returns rank of baby names in a specific year
# Kurlan Beeharry, McMaster University, 2024


###########################
# Display rank of entered name
# Globals: None
# Arguments: $1 = baby name
#	     $2 = year of birth
#	     $3 = assigned gender
# Outputs: says the rank of the baby name on stdout 
# Returns: 0
###########################

rank(){
	# Pulls the rank number of the correct gender and name, from the correct file
	local RANK_NUM=$(grep -P -o -i "\b[a-z]{2,15},$3,[0-9]+\b" us_baby_names/yob${2}.txt | grep -P -n -i "\b$1,$3,[0-9]+\b" | grep -P -o "^[0-9]+")

	# Counts the amount of names for correct gender
	local GENDER_TOTAL=$(grep -P -o -i "\b[a-z]{2,15},$3,[0-9]+\b" us_baby_names/yob${2}.txt | wc -l)

	if [[ $3 =~ [Mm] ]]
	then
		if [[ $RANK_NUM =~ ^[0-9]+$ ]]
                then
                        echo "$2: $1 ranked $RANK_NUM out of $GENDER_TOTAL male names"
                else
                        echo "$2: $1 not found among male names"
                fi
	elif [[ $3 =~ [Ff] ]]
	then
		if [[ $RANK_NUM =~ ^[0-9]+$ ]]
		then
			echo "$2: $1 ranked $RANK_NUM out of $GENDER_TOTAL female names"
		else
			echo "$2: $1 not found among female names"
		fi
	fi

	return 0
}


###########################
# says the usage information
# Globals: None
# Arguments: N.A.
# Outputs: sends the usage information to stdout and stderr
# Returns: 0
###########################

usage(){
	echo "bn [year of birth] [assigned gender f|F|m|M|b|B]" >&2
	return 0
}

###########################
# says the information on the utility
# Globals: None
# Arguments: N.A.
# Outputs: says all information needed for bn utility
# Returns: 0
###########################

help(){
	echo -e "					User Commands					\n"
	
	echo -e "bn - Version 0.0.3\n"
	
	echo "NAME"
	
	echo -e "	bn - searches for baby names in us_baby_names/ and print their rank in standard output\n"

	echo "USAGE"
	echo -e "\t $(usage) \n"

	echo "DESCRIPTION"
	echo -e "	bn searches us_baby_names/ directory for yob[year of birth].txt, then inside yob[]year of birth].txt searches for the [assigned gender]. 
	After utility is ran in shell, reads every argument from standard input and prints rank of name(s) for current year and gender. Command runs until EOF\n"
	
	echo -e "OPTIONS\n"
	echo "Generic Program Information"
	echo -e "	--help	Opens this page of usage and information\n"
	
	echo -e "Argument Information\n"
	
	echo "Year Of Birth"
	echo -e "	Accepts any 4 integer digit, correspond to year of search\n"
	
	echo "Assigned Gender"
	echo "	[m|M]	Searches for male baby names only"
	echo "	[f|F]	Searches for females baby names only"
	echo -e "	[b|B]	Searches for both gender names\n"

	echo "EXIT STATUS"
	echo -e "	When program run successfully and ends with an EOF, exit status is 0, 1 if number of arguments is not exactly 2, 
	exit status 2 when arguments not formatted correctly, 3 when standard input not formatted correctly and 
	exit status 4 when no data was found for year entered.\n"

	echo "EXAMPLE"
	echo -e "	The following example outputs the rank of the baby name 'Sam' for the 2005 males.
	The 2005 argument represents the year where it will search for the baby name, M is the
	argument which represents the gender the command will look for.\n"
	
	echo "	\$ bn 2005 M"
	echo "	Sam"
	echo "	2005: Sam ranked 460 out of 13368 male names"
	
	return 0
}

# Main block

# Error Cases
if [[ $1 == --help ]]
then
	help
elif [[ $# != 2 ]]
then
	usage
	exit 1

elif [[ ! $1 =~ ^[0-9]{4}$ ]] 
then       
	echo "Badly formatted year of birth: $1" >&2	
	usage
	exit 2

elif [[ ! $2 =~ ^[mMfFbB]{1}$ ]]
then
	echo "Badly formatted assigned gender: $2" >&2
	usage
	exit 2

elif [[ ! -f us_baby_names/yob${1}.txt ]]
then
	echo "No data for $1" >&2
	exit 4

## Correct format
elif [[ $1 =~ ^[0-9]{4}$ && $2 =~ ^[mMfFbB]{1}$ && -f us_baby_names/yob${1}.txt ]]
then
	# When both gender needed
	if [[ $2 =~ [bB] ]]
	then
		while read line
		do
			for name in $line
			do
				if [[ $name =~ ^[a-zA-Z]+$ ]]
				then	
					rank $name $1 M
					rank $name $1 F
				else
					echo "Badly formatted name: $name" >&2
					exit 3
				fi
			done
		done
	else
		# When only one gender entered
		while read line
		do 
			for name in $line
			do
				if [[ $name =~ ^[a-zA-Z]+$ ]]
				then
					rank $name $1 $2
				else
					echo "Badly formatted name: $name" >&2
					exit 3
				fi
			done
		done
	fi
fi
